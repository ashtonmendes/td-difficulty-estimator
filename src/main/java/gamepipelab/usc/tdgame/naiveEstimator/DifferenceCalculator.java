package gamepipelab.usc.tdgame.naiveEstimator;

import gamepipelab.usc.tdgame.entities.Tower;
import gamepipelab.usc.tdgame.specs.Wave;

import java.util.LinkedList;
import java.util.List;

/**
 * Generates a difference of (total firepower of a tower) - (total HP of monsters)
 *
 * Created by ashton on 10/16/15.
 */
public class DifferenceCalculator {

    /*public static void main(String args[]) throws Exception {
        Scanner sc = new Scanner(in);
        List<Wave> waves = new WaveReader().readWaves();
        List<Tower> selectedTowers = new CostBasedTowerSelector().selectTowers(200, 5);
        new DifferenceCalculator().calculateDifference(waves.get(0), selectedTowers);
    }*/

    public float calculateDifference(Wave wave, List<Tower> towers) {

        //Calculate monster statistics
        WaveMonsterData.getWaveRecord(wave);

        //Separate selected towers into air and ground towers
        List<Tower> groundTowers = new LinkedList<Tower>();
        List<Tower> airTowers = new LinkedList<Tower>();

        for(Tower tower : towers)
            if(tower.isAirUnit())
                airTowers.add(tower);
            else
                groundTowers.add(tower);

        System.out.println();
        System.out.println("GROUND UNITS: "+(calculateTotalFirePower(groundTowers, WaveMonsterData.avgTimeGround) - WaveMonsterData.totalHPGround));
        System.out.println("AIR UNITS: "+(calculateTotalFirePower(airTowers, WaveMonsterData.avgTimeAir) - WaveMonsterData.totalHPAir));

        return 0f;
    }

    /**
     * Calculates the total firepower generated by the towers in the specified time
     * @return total firepower
     */
    public float calculateTotalFirePower(List<Tower> towers, float time) {
        float totalFirePower = 0f;

        for(Tower tower : towers) {
            totalFirePower += (tower.getRateOfFire() * tower.getDamage()) * time;
        }

        return totalFirePower;
    }
}
